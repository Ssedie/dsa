class User:
    def __init__(self, school_id, password=None):
        self.school_id = school_id
        self.password = password


class Message:
    def __init__(self, sender, recipient, content):
        self.sender = sender
        self.recipient = recipient
        self.content = content


class MessageQueue:
    def __init__(self):
        self.queue = []

    def enqueue(self, message):
        self.queue.append(message)

    def dequeue(self):
        if len(self.queue) > 0:
            return self.queue.pop(0)
        return None

    def display_messages(self):
        if len(self.queue) == 0:
            print("No new messages.")
        else:
            for message in self.queue:
                print(f"From: {message.sender} - Message: {message.content}")


class System:
    def __init__(self):
        self.users = {
            "alice": User("alice", "pass123"),
            "bob": User("bob", "secure456"),
            "charlie": User("charlie", "mypassword")
        }  # Preloaded users

        self.logged_in_user = None
        self.recipients = []  # Will be set upon login
        self.groups = {}
        self.message_queues = {}

    def show_login_prompt(self):
        print("Welcome to the messaging system.")
        print("1. Login")
        print("2. Create New User")
        choice = input("Choose an option: ")

        if choice == '1':
            self.login()
        elif choice == '2':
            self.create_new_user()
        else:
            print("Invalid choice. Please try again.")
            self.show_login_prompt()

    def login(self):
        school_id = input("Enter School ID: ")
        password = input("Enter Password: ")
        if school_id in self.users and self.users[school_id].password == password:
            self.logged_in_user = self.users[school_id]
            # Set recipient list to all other users
            self.recipients = [uid for uid in self.users if uid != school_id]
            print(f"Login successful. Welcome {school_id}!")
            self.show_navigation_menu()
        else:
            print("Invalid credentials. Redirecting to new user creation...")
            self.create_new_user()

    def create_new_user(self):
        school_id = input("Enter new School ID: ")
        if school_id in self.users:
            print(f"User with ID {school_id} already exists.")
            return self.show_login_prompt()

        password = input("Enter password: ")
        confirm_password = input("Confirm password: ")

        if password != confirm_password:
            print("Passwords do not match. Please try again.")
            return self.create_new_user()

        new_user = User(school_id, password)
        self.users[school_id] = new_user
        self.logged_in_user = new_user
        # Set recipient list to all other users
        self.recipients = [uid for uid in self.users if uid != school_id]
        print(f"User with ID {school_id} has been created successfully.")
        self.show_navigation_menu()

    def show_navigation_menu(self):
        while True:
            print("\n--- Navigation Menu ---")
            print("1. Add User (Friend)")
            print("2. Show Recipient List")
            print("3. Create Group")
            print("4. Message")
            print("5. Logout")
            choice = input("Choose an option: ")

            if choice == '1':
                self.add_user()
            elif choice == '2':
                self.show_recipient_list()
            elif choice == '3':
                self.create_group()
            elif choice == '4':
                self.send_message()
            elif choice == '5':
                self.logout()
                break
            else:
                print("Invalid choice, please try again.")

    def add_user(self):
        new_school_id = input("Enter the School ID of the user to add: ")

        if new_school_id not in self.users:
            print(f"User with ID {new_school_id} does not exist.")
            self.recipients.append(new_school_id)
            print(f"User {new_school_id} has been added to your recipient list.")
        else:
            print(f"User {new_school_id} is already in your recipient list.")

        print("Updated recipient list:", self.recipients)

    def show_recipient_list(self):
        print("\n--- Recipient List ---")
        print(self.recipients)
        recipient = input("Choose a recipient from the list: ")
        if recipient not in self.recipients:
            print("Recipient not found.")
        else:
            self.ask_send_message(recipient)

    def ask_send_message(self, recipient):
        send_message = input(f"Do you want to send a message to {recipient}? Y/N: ")
        if send_message.upper() == 'Y':
            message = input("Enter your message: ")
            self.create_message(recipient, message)
            self.ask_send_another_message()
        else:
            return

    def ask_send_another_message(self):
        send_another = input("Do you want to send another message? Y/N: ")
        if send_another.upper() == 'Y':
            recipient = input("Choose a recipient from the list: ")
            if recipient not in self.recipients:
                print("Recipient not found.")
            else:
                message = input("Enter your message: ")
                self.create_message(recipient, message)
                self.ask_send_another_message()
        else:
            print("Returning to recipient list.")

    def create_message(self, recipient, content):
        message = Message(self.logged_in_user.school_id, recipient, content)
        if recipient not in self.message_queues:
            self.message_queues[recipient] = MessageQueue()
        self.message_queues[recipient].enqueue(message)
        print("Message sent.")

    def send_message(self):
        print("\n--- Send Message ---")
        choice = input("Choose message type: 1 for Personal, 2 for Group: ")
        if choice == '1':
            self.show_recipient_list()
        elif choice == '2':
            group_name = input("Enter the group name: ")
            self.send_message_to_group(group_name)

    def send_message_to_group(self, group_name):
        if group_name not in self.groups:
            print(f"Group {group_name} does not exist.")
        else:
            message_content = input(f"Enter your message to the group {group_name}: ")
            for member in self.groups[group_name]:
                self.create_message(member, message_content)
            print(f"Message sent to group {group_name}.")

    def create_group(self):
        group_name = input("Enter the name of the new group: ")

        if group_name in self.groups:
            print(f"Group {group_name} already exists.")
            return
        
        members = self.add_to_group(group_name)
        MIN_GROUP_MEMBERS = 2

        if len(members) < MIN_GROUP_MEMBERS:
            print(f"A group must have at least {MIN_GROUP_MEMBERS} members. Group {group_name} was not created.")
        else:
            self.groups[group_name] = members
            self.recipients.append(group_name)
            print(f"Group '{group_name}' has been created with members: {members}")

    def add_to_group(self, group_name):
        members = []
        while True:
            print("\nCurrent Recipient List:", self.recipients)
            add_user = input(f"Do you want to add a user to the group {group_name}? Y/N: ")
            if add_user.upper() == 'Y':
                user_id = input("Enter the School ID of the user to add: ")
                if user_id not in self.recipients:
                    print(f"User {user_id} not found in the recipient list.")
                else:
                    if user_id not in members:
                        members.append(user_id)
                        print(f"User {user_id} added to the group.")
                    else:
                        print(f"User {user_id} is already in the group.")
            elif add_user.upper() == 'N':
                break
            else:
                print("Invalid input. Please enter Y or N.")
        return members

    def logout(self):
        logout_choice = input("Do you want to logout? Y/N: ")
        if logout_choice.upper() == 'Y':
            print("Logging out...")
            self.logged_in_user = None
            self.show_login_prompt()
        else:
            self.show_navigation_menu()


if __name__ == "__main__":
    system = System()
    system.show_login_prompt()
